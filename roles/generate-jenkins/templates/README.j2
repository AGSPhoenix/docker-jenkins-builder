[![{{ lsio_project_name }}]({{ lsio_primary_logo_url }})]({{ lsio_full_url }})

[![Blog]({{ lsio_shieldsio_static_blog }})]({{ lsio_blog_url }} "{{ lsio_blog_desc }}")
[![Discord]({{ lsio_shieldsio_discord }})]({{ lsio_discord_url }} "{{ lsio_discord_desc }}")
[![Discourse]({{ lsio_shieldsio_discourse_topics }})]({{ lsio_discourse_url }} "{{ lsio_discourse_desc }}")
[![Fleet]({{ lsio_shieldsio_static_fleet }})]({{ lsio_fleet_url }} "{{ lsio_fleet_desc }}")
[![GitHub]({{ lsio_shieldsio_static_github }})]({{ lsio_github_url }} "{{ lsio_github_desc }}")
[![Open Collective]({{ lsio_shieldsio_opencollective_all }})]({{ lsio_opencollective_url }} "{{ lsio_opencollective_desc }}")

The [LinuxServer.io]({{ lsio_full_url }}) team brings you another container release featuring:

 * regular application and security updates
 * easy user mappings via [PGID, PUID](https://docs.linuxserver.io/general/understanding-puid-and-pgid)
 * standardised [base images](https://github.com/linuxserver?q=baseimage) using s6 overlay
 * automatic multi architecture support and customisation via [docker mods](https://github.com/linuxserver/docker-mods)

Find us at:
* [Linuxserver.io]({{ lsio_full_url }}) - {{ lsio_site_desc }}
* [GitHub]({{ lsio_github_url }}) - {{ lsio_github_desc }}
* [Open Collective]({{ lsio_opencollective_url }}) - {{ lsio_opencollective_desc }}

# [{{ lsio_project_name_short }}/{{ project_name }}]({{ project_lsio_github_repo_url }})

[![GitHub Stars]({{ lsio_shieldsio_github_stars }})]({{ project_lsio_github_repo_url }})
[![GitHub Release]({{ lsio_shieldsio_github_release }})]({{ project_lsio_github_repo_url }}/releases)
[![GitHub Package Repository]({{ lsio_shieldsio_static_github_package }})]({{ project_lsio_github_repo_url }}/packages)
[![GitLab Container Registry]({{ lsio_shieldsio_static_gitlab_registry }})](https://gitlab.com/Linuxserver.io/{{ github_project_name }}/container_registry)
[![Docker Pulls]({{ lsio_shieldsio_docker_pulls }})]({{ project_lsio_docker_hub_url }})
[![Docker Stars]({{ lsio_shieldsio_docker_stars }})]({{ project_lsio_docker_hub_url }})
[![Jenkins Build]({{ lsio_shieldsio_jenkins_build }})]({{ lsio_ci_url }}/job/Docker-Pipeline-Builders/job/{{ github_project_name }}/job/{{ ls_branch }}/)
[![LSIO CI]({{ lsio_shieldsio_dynamic_ci }})]({{ lsio_object_url }}/{{ lsio_project_name_short }}/{{ project_name }}/latest/index.html)

{{ project_blurb }}
{% if project_blurb_optional_extras_enabled %}
{% for item in project_blurb_optional_extras %}
* {{ item }}
{% endfor %}
{% endif %}

[![{{ project_name }}]({{ project_logo }})]({{ project_url }})

## Usage

Here is an example `docker-compose` snippet to help you get started creating the container.

{% if app_setup_block_enabled %}
## Application Setup

{{ app_setup_block }}
{% endif %}

### docker-compose

Compatible with docker-compose v2 schemas.

```
{% if not custom_compose is defined %}---
version: "2.1"
services:
  {{ project_name }}:
    image: {{ lsio_project_name_short }}/{{ project_name }}
    container_name: {{ project_name }}
{% if param_usage_include_hostname is sameas true %}
    hostname: {{ param_hostname }}
{% elif param_usage_include_hostname == 'optional' %}
    hostname: {{ param_hostname }} #optional
{% endif %}
{% if privileged is sameas true %}
    privileged: true
{% elif privileged == 'optional' %}
    privileged: true #optional
{% endif %}
{% if cap_add_param or opt_cap_add_param %}
    cap_add:
{% endif %}
{% if cap_add_param %}
{% for item in cap_add_param_vars %}
      - {{ item.cap_add_var }}
{% endfor %}
{% endif %}
{% if opt_cap_add_param %}
{% for item in opt_cap_add_param_vars %}
      - {{ item.cap_add_var }} #optional
{% endfor %}
{% endif %}
{% if param_usage_include_net is sameas true %}
    network_mode: {{ param_net }}
{% elif param_usage_include_net == 'optional' %}
    network_mode: {{ param_net }} #optional
{% endif %}
{% if common_param_env_vars_enabled or param_usage_include_env or opt_param_usage_include_env %}
    environment:
{% endif %}
{% if common_param_env_vars_enabled is sameas true %}
{% for item in common_param_env_vars %}
      - {{ item.env_var }}={{ item.env_value }}
{% endfor %}
{% elif common_param_env_vars_enabled == 'optional' %}
{% for item in common_param_env_vars %}
      - {{ item.env_var }}={{ item.env_value }} #optional
{% endfor %}
{% endif %}
{% if param_usage_include_env %}
{% for item in param_env_vars %}
      - {{ item.env_var }}={{ item.env_value }}
{% endfor %}
{% endif %}
{% if opt_param_usage_include_env %}
{% for item in opt_param_env_vars %}
      - {{ item.env_var }}={{ item.env_value }} #optional
{% endfor %}
{% endif %}
{% if param_usage_include_vols or opt_param_usage_include_vols %}
    volumes:
{% endif %}
{% if param_usage_include_vols %}
{% for item in param_volumes %}
      - {{ item.vol_host_path }}:{{ item.vol_path }}
{% endfor %}
{% endif %}
{% if opt_param_usage_include_vols %}
{% for item in opt_param_volumes %}
      - {{ item.vol_host_path }}:{{ item.vol_path }} #optional
{% endfor %}
{% endif %}
{% if param_usage_include_ports or opt_param_usage_include_ports %}
    ports:
{% endif %}
{% if param_usage_include_ports %}
{% for item in param_ports %}
      - {{ item.external_port }}:{{ item.internal_port }}
{% endfor %}
{% endif %}
{% if opt_param_usage_include_ports %}
{% for item in opt_param_ports %}
      - {{ item.external_port }}:{{ item.internal_port }} #optional
{% endfor %}
{% endif %}
{% if param_device_map or opt_param_device_map %}
    devices:
{% endif %}
{% if param_device_map %}
{% for item in param_devices %}
      - {{ item.device_host_path }}:{{ item.device_path }}
{% endfor %}
{% endif %}
{% if opt_param_device_map %}
{% for item in opt_param_devices %}
      - {{ item.device_host_path }}:{{ item.device_path }} #optional
{% endfor %}
{% endif %}
{% if custom_params is defined %}
{% for item in custom_params %}
{% if item.array is not defined %}
    {{ item.name_compose }}: "{{ item.value }}"
{% else %}
    {{ item.name_compose }}:
{% for item2 in item.value %}
      - {{ item2 }}
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
{% if opt_custom_params is defined %}
{% for item in opt_custom_params %}
{% if item.array is not defined %}
    {{ item.name_compose }}: "{{ item.value }}" #optional
{% else %}
    {{ item.name_compose }}: #optional
{% for item2 in item.value %}
      - {{ item2 }} #optional
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
    restart: unless-stopped{% else %}{{ custom_compose }}{% endif %}

```

## Parameters

Container images are configured using parameters passed at runtime (such as those above). These parameters are separated by a colon and indicate `<external>:<internal>` respectively. For example, `-p 8080:80` would expose port `80` from inside the container to be accessible from the host's IP on port `8080` outside the container.

| Parameter | Function |
| :----: | --- |
{% if param_usage_include_hostname %}
| `--hostname=` | {{ param_hostname_desc }} |
{% endif %}
{% if param_usage_include_net %}
| `--net={{ param_net }}` | {{ param_net_desc }} |
{% endif %}
{% if param_usage_include_ports %}
{% for item in param_ports %}
| `-p {{ item.internal_port }}` | {{ item.port_desc }} |
{% endfor %}
{% endif %}
{% if opt_param_usage_include_ports %}
{% for item in opt_param_ports %}
| `-p {{ item.internal_port }}` | {{ item.port_desc }} |
{% endfor %}
{% endif %}
{% if common_param_env_vars_enabled %}
{% for item in common_param_env_vars %}
| `-e {{ item.env_var }}={{ item.env_value }}` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if param_usage_include_env %}
{% for item in param_env_vars %}
| `-e {{ item.env_var }}={{ item.env_value }}` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if opt_param_usage_include_env %}
{% for item in opt_param_env_vars %}
| `-e {{ item.env_var }}={{ item.env_value }}` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if param_usage_include_vols %}
{% for item in param_volumes %}
| `-v {{ item.vol_path }}` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if opt_param_usage_include_vols %}
{% for item in opt_param_volumes %}
| `-v {{ item.vol_path }}` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if param_device_map %}
{% for item in param_devices %}
| `--device {{ item.device_path }}` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if opt_param_device_map %}
{% for item in opt_param_devices %}
| `--device {{ item.device_path }}` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if custom_params is defined %}
{% for item in custom_params %}
| `--{{ item.name }}=` | {{ item.desc }} |
{% endfor %}
{% endif %}
{% if opt_custom_params is defined %}
{% for item in opt_custom_params %}
| `--{{ item.name }}=` | {{ item.desc }} |
{% endfor %}
{% endif %}

## Environment variables from files (Docker secrets)

You can set any environment variable from a file by using a special prepend `FILE__`.

As an example:

```
-e FILE__PASSWORD=/run/secrets/mysecretpassword
```

Will set the environment variable `PASSWORD` based on the contents of the `/run/secrets/mysecretpassword` file.

## Supported Architectures

Our images support multiple architectures such as `x86-64`, `arm64` and `armhf`. We utilise the docker manifest for multi-platform awareness. More information is available from docker [here](https://github.com/docker/distribution/blob/master/docs/spec/manifest-v2-2.md#manifest-list) and our announcement [here]({{ lsio_blog_url }}/2019/02/21/the-lsio-pipeline-project/).

Simply pulling `{{ lsio_project_name_short }}/{{ project_name }}` should retrieve the correct image for your arch, but you can also pull specific arch images via tags.

The architectures supported by this image are:

| Architecture | Tag |
| :----: | --- |
{% for item in available_architectures %}
| {{ item.arch }} | {{ item.tag }} |
{% endfor %}

{% if development_versions %}
## Version Tags

This image provides various versions that are available via tags. `latest` tag usually provides the latest stable version. Others are considered under development and caution must be exercised when using them.

| Tag | Description |
| :----: | --- |
{% for item in development_versions_items %}
| {{ item.tag }} | {{ item.desc }} |
{% endfor %}
{% endif %}

## Umask for running applications

For all of our images we provide the ability to override the default umask settings for services started within the containers using the optional `-e UMASK=022` setting.
Keep in mind umask is not chmod it subtracts from permissions based on it's value it does not add. Please read up [here](https://en.wikipedia.org/wiki/Umask) before asking for support.

{% if optional_parameters is defined %}
## Optional Parameters

{{ optional_parameters }}

{% endif %}
{% if common_param_env_vars_enabled %}
## User / Group Identifiers

When using volumes (`-v` flags) permissions issues can arise between the host OS and the container, we avoid this issue by allowing you to specify the user `PUID` and group `PGID`.

Ensure any volume directories on the host are owned by the same user you specify and any permissions issues will vanish like magic.

In this instance `PUID=1000` and `PGID=1000`, to find yours use `id user` as below:

```
  $ id username
    uid=1000(dockeruser) gid=1000(dockergroup) groups=1000(dockergroup)
```

{% if common_param_env_vars_enabled == 'optional' %}
You only need to set the PUID and PGID variables if you are mounting the /config folder
{% endif %}
{% endif %}

&nbsp;

{% if docker_mods %}
## Docker Mods
[![Docker Mods]({{ lsio_shieldsio_dynamic_mods }})]({{ lsio_mods_url }} "{{ lsio_mods_desc }}")

We publish various [Docker Mods](https://github.com/linuxserver/docker-mods) to enable additional functionality within our containers. The list of Mods available for this image (if any) can be accessed via the dynamic badge above.
{% endif %}

{% if nginx_reverse_proxy_snippet_enabled %}
## Reverse Proxy Snippet

This snippet has been tested with {{ lsio_project_name|capitalize}}'s [Let's Encrypt reverse proxy](https://github.com/linuxserver/docker-letsencrypt) container.
{{ nginx_reverse_proxy_block }}
{% endif %}

## Updating the container

Most of our images are static, versioned, and require an image update and container recreation to update the app inside. With some exceptions (ie. nextcloud, plex), we do not recommend or support updating apps inside the container.

TODO: Add links to Gitbook docs page for dedicated update instructions page

## Building locally

If you want to make local modifications to these images for development purposes or just to customize the logic:
```
git clone {{ lsio_github_url }}/{{ github_project_name }}.git
cd {{ github_project_name }}
docker build \
  --no-cache \
  --pull \
  -t {{ lsio_project_name_short }}/{{ project_name }}:latest .
```

TODO: Add to Gitbook how to build ARM images on x86 hardware and link to it.

See our [documentation](link) for how to build ARM images on x86_64 hardware.

## Versions

{% for item in changelogs %}
* `**{{ item.date }}**` - {{ item.desc }}
{% endfor %}
